#!/bin/bash

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏
print_header() {
    clear
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                  GIT MASTER ASSISTANT             ‚ïë"
    echo "‚ïë           –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ Git                 ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

show_info() {
    echo -e "${GREEN}–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:${NC} $(git branch --show-current)"
    echo -e "${GREEN}–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:${NC} $(pwd)"
    echo ""
}

check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${RED}‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!${NC}"
        return 1
    fi
    return 0
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
basic_operations() {
    while true; do
        echo -e "${YELLOW}=== –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===${NC}"
        echo "1.  üìä –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        echo "2.  üìÅ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã"
        echo "3.  üíæ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç"
        echo "4.  üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤"
        echo "5.  üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (diff)"
        echo "6.  üóëÔ∏è  –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        echo "7.  üì¶ –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤"
        echo "8.  ‚Ü©Ô∏è  –ù–∞–∑–∞–¥"
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " choice
        
        case $choice in
            1) git status ;;
            2) 
                echo "1. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ"
                echo "2. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"
                echo "3. –î–æ–±–∞–≤–∏—Ç—å —Å –ø–∞—Ç—á–µ–º"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " add_choice
                case $add_choice in
                    1) git add . ;;
                    2) 
                        ls -la
                        read -p "–ò–º—è —Ñ–∞–π–ª–∞: " f; git add "$f" 
                        ;;
                    3) git add -p ;;
                esac
                ;;
            3)
                git status --short
                read -p "–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: " msg
                git commit -m "$msg"
                ;;
            4)
                echo "1. –ö—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è"
                echo "2. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
                echo "3. –ò—Å—Ç–æ—Ä–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " hist_choice
                case $hist_choice in
                    1) git log --oneline -20 ;;
                    2) git log -10 ;;
                    3) git log --oneline --graph --all -15 ;;
                esac
                ;;
            5)
                echo "1. Diff —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
                echo "2. Diff staged —Ñ–∞–π–ª–æ–≤"
                echo "3. Diff –º–µ–∂–¥—É –∫–æ–º–º–∏—Ç–∞–º–∏"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " diff_choice
                case $diff_choice in
                    1) git diff ;;
                    2) git diff --staged ;;
                    3)
                        git log --oneline -10
                        read -p "–•—ç—à –∫–æ–º–º–∏—Ç–∞ 1: " h1
                        read -p "–•—ç—à –∫–æ–º–º–∏—Ç–∞ 2: " h2
                        git diff $h1 $h2
                        ;;
                esac
                ;;
            6)
                echo "1. –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"
                echo "2. –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–º–∏—Ç (soft)"
                echo "3. –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–º–∏—Ç (hard)"
                echo "4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " undo_choice
                case $undo_choice in
                    1) 
                        git status --short
                        read -p "–ò–º—è —Ñ–∞–π–ª–∞: " f; git reset "$f" 
                        ;;
                    2) git reset --soft HEAD~1 ;;
                    3) 
                        echo -e "${RED}‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è!${NC}"
                        read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/N]: " confirm
                        [[ $confirm == "y" ]] && git reset --hard HEAD~1
                        ;;
                    4)
                        git log --oneline -10
                        read -p "–•—ç—à –∫–æ–º–º–∏—Ç–∞: " commit_hash
                        read -p "–ò–º—è —Ñ–∞–π–ª–∞: " filename
                        git checkout $commit_hash -- "$filename"
                        ;;
                esac
                ;;
            7) git archive --format=zip -o backup.zip HEAD ;;
            8) break ;;
            *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}" ;;
        esac
        echo && read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
    done
}

branch_operations() {
    while true; do
        echo -e "${YELLOW}=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ï–¢–ö–ê–ú–ò ===${NC}"
        echo "1.  üåø –°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É"
        echo "2.  üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É"
        echo "3.  üìã –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫"
        echo "4.  ‚úèÔ∏è  –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤–µ—Ç–∫—É"
        echo "5.  üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –≤–µ—Ç–∫—É"
        echo "6.  üîÄ –°–ª–∏—è–Ω–∏–µ –≤–µ—Ç–æ–∫"
        echo "7.  üè∑Ô∏è  –†–∞–±–æ—Ç–∞ —Å —Ç–µ–≥–∞–º–∏"
        echo "8.  ‚Ü©Ô∏è  –ù–∞–∑–∞–¥"
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " choice
        
        case $choice in
            1) 
                read -p "–ò–º—è –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏: " branch_name
                git checkout -b "$branch_name"
                ;;
            2)
                git branch
                read -p "–ò–º—è –≤–µ—Ç–∫–∏: " branch_name
                git checkout "$branch_name"
                ;;
            3)
                echo -e "${GREEN}–õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC}"
                git branch
                echo -e "${GREEN}–£–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏:${NC}"
                git branch -r
                echo -e "${GREEN}–í—Å–µ –≤–µ—Ç–∫–∏:${NC}"
                git branch -a
                ;;
            4)
                git branch
                read -p "–¢–µ–∫—É—â–µ–µ –∏–º—è: " old_name
                read -p "–ù–æ–≤–æ–µ –∏–º—è: " new_name
                git branch -m "$old_name" "$new_name"
                ;;
            5)
                git branch
                read -p "–ò–º—è –≤–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " branch_name
                git branch -d "$branch_name"
                ;;
            6)
                echo "1. Merge (–±—ã—Å—Ç—Ä–æ–µ —Å–ª–∏—è–Ω–∏–µ)"
                echo "2. Rebase (–ø–µ—Ä–µ–±–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ)"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " merge_choice
                git branch
                read -p "–ò–º—è –≤–µ—Ç–∫–∏: " branch_name
                case $merge_choice in
                    1) git merge "$branch_name" ;;
                    2) git rebase "$branch_name" ;;
                esac
                ;;
            7)
                echo "1. –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥"
                echo "2. –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤"
                echo "3. –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " tag_choice
                case $tag_choice in
                    1) 
                        read -p "–ò–º—è —Ç–µ–≥–∞: " tag_name
                        read -p "–°–æ–æ–±—â–µ–Ω–∏–µ: " tag_msg
                        git tag -a "$tag_name" -m "$tag_msg"
                        ;;
                    2) git tag -l ;;
                    3)
                        git tag -l
                        read -p "–ò–º—è —Ç–µ–≥–∞: " tag_name
                        git tag -d "$tag_name"
                        ;;
                esac
                ;;
            8) break ;;
            *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}" ;;
        esac
        echo && read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
    done
}

remote_operations() {
    while true; do
        echo -e "${YELLOW}=== –†–ê–ë–û–¢–ê –° –£–î–ê–õ–ï–ù–ù–´–ú –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–ú ===${NC}"
        echo "1.  üì° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å remote"
        echo "2.  ‚ûï –î–æ–±–∞–≤–∏—Ç—å remote"
        echo "3.  üöÄ Push (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å)"
        echo "4.  üì• Pull (–ø–æ–ª—É—á–∏—Ç—å)"
        echo "5.  üìã Fetch (–∑–∞–≥—Ä—É–∑–∏—Ç—å)"
        echo "6.  üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å remote"
        echo "7.  üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ repo"
        echo "8.  ‚Ü©Ô∏è  –ù–∞–∑–∞–¥"
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " choice
        
        case $choice in
            1) git remote -v ;;
            2)
                read -p "–ò–º—è (–æ–±—ã—á–Ω–æ origin): " remote_name
                read -p "URL: " remote_url
                git remote add "$remote_name" "$remote_url"
                ;;
            3)
                git remote -v
                read -p "Remote –∏–º—è: " remote_name
                read -p "–í–µ—Ç–∫–∞: " branch_name
                git push "$remote_name" "$branch_name"
                ;;
            4)
                git remote -v
                read -p "Remote –∏–º—è: " remote_name
                read -p "–í–µ—Ç–∫–∞: " branch_name
                git pull "$remote_name" "$branch_name"
                ;;
            5) git fetch --all ;;
            6)
                git remote -v
                read -p "–ò–º—è remote –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " remote_name
                git remote remove "$remote_name"
                ;;
            7)
                git remote -v
                read -p "–ò–º—è remote: " remote_name
                git remote show "$remote_name"
                ;;
            8) break ;;
            *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}" ;;
        esac
        echo && read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
    done
}

advanced_operations() {
    while true; do
        echo -e "${YELLOW}=== –ü–†–û–î–í–ò–ù–£–¢–´–ï –û–ü–ï–†–ê–¶–ò–ò ===${NC}"
        echo "1.  üé≠ Stash (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)"
        echo "2.  üîç –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏"
        echo "3.  üèóÔ∏è  –°—É–±–º–æ–¥—É–ª–∏"
        echo "4.  ‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git"
        echo "5.  üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        echo "6.  üóÇÔ∏è  –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏"
        echo "7.  ‚Ü©Ô∏è  –ù–∞–∑–∞–¥"
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " choice
        
        case $choice in
            1)
                echo "1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ stash"
                echo "2. –ü–æ–∫–∞–∑–∞—Ç—å stash —Å–ø–∏—Å–æ–∫"
                echo "3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å stash"
                echo "4. –£–¥–∞–ª–∏—Ç—å stash"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " stash_choice
                case $stash_choice in
                    1) 
                        read -p "–°–æ–æ–±—â–µ–Ω–∏–µ: " msg
                        git stash push -m "$msg"
                        ;;
                    2) git stash list ;;
                    3) 
                        git stash list
                        read -p "–ù–æ–º–µ—Ä stash: " num
                        git stash apply "stash@{$num}"
                        ;;
                    4)
                        git stash list
                        read -p "–ù–æ–º–µ—Ä stash: " num
                        git stash drop "stash@{$num}"
                        ;;
                esac
                ;;
            2)
                echo "1. –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –∫–æ–º–º–∏—Ç–∞"
                echo "2. –ü–æ–∏—Å–∫ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤ –∫–æ–¥–µ"
                echo "3. –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " search_choice
                case $search_choice in
                    1) 
                        read -p "–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: " text
                        git log --oneline --grep="$text"
                        ;;
                    2)
                        read -p "–¢–µ–∫—Å—Ç –≤ –∫–æ–¥–µ: " text
                        git log -p -S "$text"
                        ;;
                    3)
                        read -p "–ò–º—è –∞–≤—Ç–æ—Ä–∞: " author
                        git log --oneline --author="$author"
                        ;;
                esac
                ;;
            3)
                echo "1. –î–æ–±–∞–≤–∏—Ç—å —Å—É–±–º–æ–¥—É–ª—å"
                echo "2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É–±–º–æ–¥—É–ª–∏"
                echo "3. –û–±–Ω–æ–≤–∏—Ç—å —Å—É–±–º–æ–¥—É–ª–∏"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " sub_choice
                case $sub_choice in
                    1)
                        read -p "URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: " repo_url
                        read -p "–ü—É—Ç—å: " path
                        git submodule add "$repo_url" "$path"
                        ;;
                    2) git submodule init ;;
                    3) git submodule update ;;
                esac
                ;;
            4)
                echo "1. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥"
                echo "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è"
                echo "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email"
                echo "4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " config_choice
                case $config_choice in
                    1) git config --list ;;
                    2)
                        read -p "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " name
                        git config --global user.name "$name"
                        ;;
                    3)
                        read -p "Email: " email
                        git config --global user.email "$email"
                        ;;
                    4)
                        echo "1. Vim"
                        echo "2. Nano"
                        echo "3. Code (VS Code)"
                        read -p "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä: " editor_choice
                        case $editor_choice in
                            1) git config --global core.editor "vim" ;;
                            2) git config --global core.editor "nano" ;;
                            3) git config --global core.editor "code --wait" ;;
                        esac
                        ;;
                esac
                ;;
            5)
                echo -e "${RED}‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!${NC}"
                echo "1. –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã"
                echo "2. –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " clean_choice
                case $clean_choice in
                    1)
                        read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/N]: " confirm
                        [[ $confirm == "y" ]] && git clean -fd
                        ;;
                    2)
                        echo -e "${RED}‚ùå –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è!${NC}"
                        read -p "–¢–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã? [y/N]: " confirm
                        [[ $confirm == "y" ]] && git reset --hard && git clean -fd
                        ;;
                esac
                ;;
            6)
                echo "1. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤"
                echo "2. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " dir_choice
                case $dir_choice in
                    1) 
                        find . -type f -name "*.sh" -o -name "*.py" -o -name "*.md" -o -name "*.txt" | head -20
                        ;;
                    2)
                        read -p "–ò–º—è —Ñ–∞–π–ª–∞: " filename
                        find . -name "*$filename*" -type f
                        ;;
                esac
                ;;
            7) break ;;
            *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}" ;;
        esac
        echo && read -p "–ù–∞–∂–º–∏—Ç–µ Enter..."
    done
}

main_menu() {
    while true; do
        print_header
        show_info
        
        echo -e "${PURPLE}=== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===${NC}"
        echo "1. üìù –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        echo "2. üåø –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏"
        echo "3. üì° –†–∞–±–æ—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
        echo "4. ‚ö° –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        echo "5. üéØ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
        echo "6. ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
        echo "7. üö™ –í—ã—Ö–æ–¥"
        echo ""
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é [1-7]: " main_choice
        
        case $main_choice in
            1) basic_operations ;;
            2) branch_operations ;;
            3) remote_operations ;;
            4) advanced_operations ;;
            5)
                echo -e "${GREEN}üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:${NC}"
                echo "1. –°—Ç–∞—Ç—É—Å + –¥–æ–±–∞–≤–∏—Ç—å + –∫–æ–º–º–∏—Ç + –ø—É—à"
                echo "2. –°–æ–∑–¥–∞—Ç—å feature –≤–µ—Ç–∫—É"
                echo "3. –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É"
                read -p "–í—ã–±–µ—Ä–∏—Ç–µ: " quick_choice
                case $quick_choice in
                    1)
                        git status
                        git add .
                        read -p "–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: " msg
                        git commit -m "$msg"
                        git push origin $(git branch --show-current)
                        ;;
                    2)
                        read -p "–ò–º—è feature: " feature_name
                        git checkout -b "feature/$feature_name"
                        ;;
                    3)
                        git checkout main
                        git pull origin main
                        ;;
                esac
                ;;
            6)
                echo -e "${CYAN}=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ü–û–ó–ò–¢–û–†–ò–ò ===${NC}"
                echo "–†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $(du -sh .git | cut -f1)"
                echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤: $(git rev-list --count HEAD)"
                echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $(git log -1 --format=%cd --date=relative)"
                echo "–ê–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞: $(git log -1 --format=%an)"
                echo "–í–µ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | cut -d'/' -f2 || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')"
                ;;
            7)
                echo -e "${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
                ;;
        esac
        
        echo ""
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
    done
}

# –ó–∞–ø—É—Å–∫
if check_git_repo; then
    main_menu
else
    echo -e "${RED}–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!${NC}"
    echo "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: git init"
    exit 1
fi
