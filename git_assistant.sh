#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë           GIT –ê–°–°–ò–°–¢–ï–ù–¢             ‚ïë"
    echo "‚ïë     –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å Git      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${RED}‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!${NC}"
        echo "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: git init"
        return 1
    fi
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    echo -e "${YELLOW}=== –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° ===${NC}"
    git status
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
add_files() {
    echo -e "${YELLOW}=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í ===${NC}"
    echo "1. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"
    echo "2. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"
    echo "3. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç [1-3]: " add_choice
    
    case $add_choice in
        1)
            git add .
            echo -e "${GREEN}‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!${NC}"
            ;;
        2)
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:"
            git status --porcelain | grep -E '^\?\?'
            read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: " filename
            git add "$filename"
            echo -e "${GREEN}‚úÖ –§–∞–π–ª '$filename' –¥–æ–±–∞–≤–ª–µ–Ω!${NC}"
            ;;
        3)
            return
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
make_commit() {
    echo -e "${YELLOW}=== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ú–ò–¢–ê ===${NC}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    echo "–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞:"
    git status --short
    
    if git diff --cached --quiet && git diff --quiet; then
        echo -e "${YELLOW}‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞${NC}"
        return
    fi
    
    read -p "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: " message
    
    if [ -z "$message" ]; then
        message="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç $(date '+%Y-%m-%d %H:%M:%S')"
    fi
    
    git commit -m "$message"
    echo -e "${GREEN}‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ç–∫–∞–º–∏
branch_management() {
    echo -e "${YELLOW}=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ï–¢–ö–ê–ú–ò ===${NC}"
    echo "1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É"
    echo "2. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É"
    echo "3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏"
    echo "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Ç–∫—É"
    echo "5. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç [1-5]: " branch_choice
    
    case $branch_choice in
        1)
            read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏: " new_branch
            git checkout -b "$new_branch"
            echo -e "${GREEN}‚úÖ –í–µ—Ç–∫–∞ '$new_branch' —Å–æ–∑–¥–∞–Ω–∞!${NC}"
            ;;
        2)
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:"
            git branch
            read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–µ—Ç–∫–∏: " switch_branch
            git checkout "$switch_branch"
            ;;
        3)
            echo -e "${YELLOW}=== –í–ï–¢–ö–ò ===${NC}"
            git branch -a
            ;;
        4)
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:"
            git branch
            read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " delete_branch
            git branch -d "$delete_branch"
            ;;
        5)
            return
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ GitHub
push_to_github() {
    echo -e "${YELLOW}=== –û–¢–ü–†–ê–í–ö–ê –ù–ê GITHUB ===${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ remote
    if ! git remote get-url origin > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω remote origin${NC}"
        read -p "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? [y/N]: " add_remote
        if [[ $add_remote == "y" || $add_remote == "Y" ]]; then
            read -p "–í–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: " repo_url
            git remote add origin "$repo_url"
        else
            return
        fi
    fi
    
    current_branch=$(git branch --show-current)
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Ç–∫–∏: $current_branch"
    
    git push origin "$current_branch"
    echo -e "${GREEN}‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏
show_history() {
    echo -e "${YELLOW}=== –ò–°–¢–û–†–ò–Ø –ö–û–ú–ú–ò–¢–û–í ===${NC}"
    git log --oneline --graph --all -10
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        clear
        print_header
        
        echo -e "${GREEN}–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:${NC} $(git branch --show-current 2>/dev/null || echo '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')"
        echo -e "${GREEN}–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:${NC} $(pwd)"
        echo ""
        
        echo "1. üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
        echo "2. üìÅ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã"
        echo "3. üíæ –°–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç"
        echo "4. üåø –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏"
        echo "5. üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ GitHub"
        echo "6. üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤"
        echo "7. üîÑ –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (pull)"
        echo "8. üóÇÔ∏è  –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"
        echo "9. üö™ –í—ã–π—Ç–∏"
        echo ""
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-9]: " main_choice
        
        case $main_choice in
            1)
                show_status
                ;;
            2)
                add_files
                ;;
            3)
                make_commit
                ;;
            4)
                branch_management
                ;;
            5)
                push_to_github
                ;;
            6)
                show_history
                ;;
            7)
                echo -e "${YELLOW}=== –ü–û–õ–£–ß–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–ô ===${NC}"
                git pull origin main
                ;;
            8)
                echo -e "${YELLOW}=== –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê ===${NC}"
                find . -type f -name "*.sh" -o -name "*.py" -o -name "*.md" -o -name "*.txt" | head -20
                ;;
            9)
                echo -e "${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
                ;;
        esac
        
        echo ""
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
    done
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
clear
if check_git_repo; then
    main_menu
else
    echo -e "${RED}–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!${NC}"
    exit 1
fi
